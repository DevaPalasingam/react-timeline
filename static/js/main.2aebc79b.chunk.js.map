{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","title","type","placeholder","React","Component","Content","activities","map","activity","ActivityItem","alt","text","src","user","avatar","name","timestamp","comments","length","Date","getTime","id","from","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAmBMA,G,6KAEF,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,YACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,YAEjB,0BAAMA,UAAU,SACbC,KAAKC,MAAMC,OAGd,2BACEC,KAAK,OACLJ,UAAU,cACVK,YAAY,cAEd,yBAAKL,UAAU,iC,GAlBFM,IAAMC,YAwBrBC,E,uKACM,IACDC,EAAcR,KAAKC,MAAnBO,WAEP,OACE,yBAAKT,UAAU,WACb,yBAAKA,UAAU,SAGdS,EAAWC,KAAI,SAACC,GAAD,OACd,kBAAC,EAAD,CACEA,SAAUA,Y,GAXAL,IAAMC,WAkBtBK,E,uKACM,IACDD,EAAYV,KAAKC,MAAjBS,SAEP,OACE,yBAAKX,UAAU,QACb,yBAAKA,UAAU,UACb,yBACEa,IAAKF,EAASG,KACdC,IAAKJ,EAASK,KAAKC,SAEpBN,EAASK,KAAKE,MAGjB,0BAAMlB,UAAU,QACbW,EAASQ,WAEZ,2BAAIR,EAASG,MACb,yBAAKd,UAAU,gBACZW,EAASS,SAASC,a,GAnBFf,IAAMC,WAuC3BE,EAAa,CAbH,CACdU,WAAW,IAAIG,MAAOC,UACtBT,KAAM,YACNE,KAAM,CACJQ,GAAI,EACJN,KAAM,OACND,OAAQ,kDAEVG,SAAU,CACR,CAAEK,KAAM,MAAOX,KAAM,aAMvB,CACEK,WAAW,IAAIG,MAAOC,UACtBT,KAAM,oCACNE,KAAM,CACJQ,GAAI,EAAGN,KAAM,MACbD,OAAQ,kDAEVG,SAAU,CAAC,CAAEK,KAAM,OAAQX,KAAM,sBAItBY,EA9GH,WACV,OACE,yBAAK1B,UAAU,QACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,CAAQG,MAAM,aACd,kBAAC,EAAD,CAAQA,MAAM,YACd,kBAAC,EAAD,CAAQA,MAAM,aACd,kBAAC,EAAD,CAAQA,MAAM,SACd,kBAAC,EAAD,CAASM,WAAYA,QCAXkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2aebc79b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"demo\">\n      <div className=\"notificationsFrame\">\n        <div className=\"panel\">\n          <Header title=\"Timeline\" />\n          <Header title=\"Profile\" />\n          <Header title=\"Settings\" />\n          <Header title=\"Chat\" />\n          <Content activities={activities}/>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <div className=\"menuIcon\">\n          <div className=\"dashTop\"></div>\n          <div className=\"dashBottom\"></div>\n          <div className=\"circle\"></div>\n        </div>\n        <span className=\"title\">\n          {this.props.title}\n        </span>\n\n        <input\n          type=\"text\"\n          className=\"searchInput\"\n          placeholder=\"Search...\" />\n\n        <div className=\"fa fa-search searchIcon\"></div>\n      </div>\n    )\n  }\n}\n\nclass Content extends React.Component {\n  render() {\n    const {activities} = this.props;\n\n    return (\n      <div className=\"content\">\n        <div className=\"line\"></div>\n\n        {/* Timeline item */}\n        {activities.map((activity) => (\n          <ActivityItem\n            activity={activity} />\n        ))}\n      </div>\n    )\n  }\n}\n\nclass ActivityItem extends React.Component {\n  render() {\n    const {activity} = this.props;\n\n    return (\n      <div className=\"item\">\n        <div className=\"avatar\">\n          <img\n            alt={activity.text}\n            src={activity.user.avatar}\n            />\n          {activity.user.name}\n        </div>\n\n        <span className=\"time\">\n          {activity.timestamp}\n        </span>\n        <p>{activity.text}</p>\n        <div className=\"commentCount\">\n          {activity.comments.length}\n        </div>\n      </div>\n    )\n  }\n}\n\nconst moment1 = {\n  timestamp: new Date().getTime(),\n  text: \"Ate lunch\",\n  user: {\n    id: 1,\n    name: 'Nate',\n    avatar: \"http://www.croop.cl/UI/twitter/images/doug.jpg\"\n  },\n  comments: [\n    { from: 'Ari', text: 'Me too!'}\n  ]\n};\n\nconst activities = [\n  moment1,\n  {\n    timestamp: new Date().getTime(),\n    text: \"Woke up early for a beautiful run\",\n    user: {\n      id: 2, name: 'Ari',\n      avatar: \"http://www.croop.cl/UI/twitter/images/doug.jpg\"\n    },\n    comments: [{ from: 'Nate', text: 'I am so jealous'}]\n  },\n];\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}